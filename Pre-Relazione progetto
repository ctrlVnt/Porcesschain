PROCESSO MASTER
	-padre di tutti i figli
	-gestisce la simulazione 
	-crea il LIBRO MASTRO
	-stampa periodicamente i bilanci dei PROCESSI UTENTE e NODO e per farlo accede al LIBRO MASTRO

PROCESSI UTENTE
	-creano e inviano transazioni ai PROCESSI NODO 
	-ha un BUDGET INIZIALE uguale per tutti
	-CICLO DI VITA:
		-calcola il bilancio corrente = BUDGET INIZIALE facendo la somma algebrica (entrate e uscite) 
	     sottraendo le uscite non registrare nel LIBRO MASTRO
		-estrae casualmente un nodo a cui inviare soldi e attende un INTERVALLO DI TEMPO
	-genera una transazioni in risposta ad un segnale(scelto da noi mascherato)
	
	GESTIONE INVIO TRANSAZIONE E ATTESA
		calcolo bilancio corrente(funzione)
		maschero segnali
		invio transazione(funzione)
		smaschero segnali
		nanosleep(attesaTOTALE, attesaRIMANENTE)
			eventuale gestione segnale(eve
			ntuale nuova transazione)
		se attesaRIMANENTE == 0 continuo normalmente, altrimenti richiamo 
		nanosleep(attesaRIMANENTE, ...) -> possibile ciclo while(attesaRIMANENTE != 0)
		continua esecuzione
		dopo aver tentato SO_RETRY di inviare volte e non ho i soldi per farlo, termino il processo utente
		notificando il MASTER(possibili implementazione di attesa dopo ciuascun SO_RETRY)
		
PROCESSI NODO
	-memorizza privatamente la lista di transazioni ricevute da processare -- transaction pool
		* array di transazioni ??? memoria condivisa ???
	-se transaction pool e' PIENA allora ogni ulteriore transazione viene SCARTATA e non eseguita e sender informato
		**(ATTENZIONE punto da gestire in caso di verione "normal"!!!)
	-transazioni processate in BLOCCHI, ogni BLOCCO contiene un SO_BLOCK_SIZE di transazioni di cui
	1 e' la transazione di pagamento e il resto sono le transazioni ricevute.
	-CICLO DI VITA:
		-Creazione di un blocco candidato
			-Estrazione un insieme massimo di SO_BLOCK_SIZE-1 transazioni non ancora presenti nel libro.
		-Simulazione dell'elaborazione attraverso una attesa non attiva(valore compreso tra SO_MIN_TRANS... SO_MAX_TRANS...)

		STRUTTURA CICLO DI VITA:
			-FASE 1: riempimento transaction pool
			-FASE 2: creazione blocco da scrivere sul libro mastro
			-FASE 3: simulazione elaborazione tramite attesa non attiva
			-FASE 4: scrittura sul libro mastro del blocco
			-FASE 5: cancellazione da transaction pool delle transazioni appena scritte sul libro mastro
			-FASE 6: incremento semaforo con valore SO_BLOCK_SIZE-1 
		eventuale controllo finale, quando la transaction pool rimane vuota a lungo, su transaction pool e 
		processi morti
		
		
LIBRO MASTRO(una risorsa condivisa!!!)
	-Accessibile sia ai nodi che agli utenti 
	-Memorizza le transazioni ESEGUITE
	-Transazione CONFERMATA se e solo se ENTRA a far parte del libro mastro
	-E' formato da una sequenza di blocchi(lunghezza massima SO_REGISTRY_SIZE) consecutivi.
	-Ogni blocco e' identificato da un ID intero progressivo
	-Transazione memorizzata e' identificata da una TRIPLETA: timestamp, sender, receiver.

-TERMINAZIONE:
	-SO_SECONDI: alarm!!! (proc. master); 
	-Capacita' del libro master si esaurisce: controllo prima di registrare una transaction, oppure indice eccede SO_REGISTRY_SIZE!!!
	*** obbliggare tutti i proc. nodi e i proc. utenti di terminare

-TRANSAZIONE
	-sorteggio usando mappa <int><string> (int = pid) (string =flag(vivo,morto.....)) ???
	-struttura ben definita(leggere la traccia)
	-viene inviata dal processo UTENTE(scelto a caso) al processo NODO(scelto a caso)
	-vengono creati dai processi utente
	*** TRANSAZIONE DI REWARD viene gestita(creasta + inviata) dal processo nodo


INFORMAZIONI IMPLEMENTATIVE STRUTTURE DA USARE:?
	-SEMAFORO PER GESTIRE COMUNICAZIONE UTENTE - NODO:
		-probabilmente necessitiamo di una SETALL e per impostare i valori di tutti i semafori del 
		 probabile set che definiamo -> dovremmo fare una semget(key, SO_NODES_NUM, permessi e flag)
		-avremo una combinazione tra l'indice dell'array in cui sono salvati tutti i processi nodo(se scegliamo questa strada) e 
		 l'id del semaforo che useranno i processi utente per comunicare con quel nodo.
		 es: "indice array nodo 1 == 1 -> ID_SEMAFORO_NODO = 1"
		-per evitare la richiesta bloccante quando la TRANSACTION POOL del nodo scelto dall'utente
		 risulta piena, usiamo nella struct sembuf che passeremo a semop, il flag IPC_NOWAIT che 
		 restituirà errore EAGAIN -> Da gestire per far cominciare il ciclo di SO_RETRY.
		
	-ARRAY CONTENENTE I PID DEI PROCESSI NODO(per scegliere a quale nodo inviare la transazione)
		-si definisce prima del ciclo for relarivo ai nodi un array di dimensione SO_NODES_NUM a cui facciamo
		 accedere in mutua esclusione tutti i nodi per memorizzare al suo interno gli ID delle code di messaggi.
		-utilizziamo poi il pid del nodo per creare la coda di messaggi relativa. L'array ci servirà dunque 
		 per sapere quale chiave usare per accedere alla coda di messaggi di un relativo nodo.
		 
		 SOLUZIONE ALTERNATIVA:
		 	-al posto del pid inserire nell'array direttamente l'id della coda di messaggi del nodo.
		 	 I nodi verranno ordinati grazie all'indice dell'array che avrà una corrispondenza 1 a 1 con l'ID 
		 	 del semaforo che gestisce la memorizzazione.
	
	-ARRAY CONTENENTE I PID DEI PROCESSI UTENTE
		Array necessario in quanto è richiesto di specificare nella transazione chi è il sender(basta un getpid()) e
		chi è il receiver(valore che dovremo estrarre casualmente da una pool(array?) di possibili destinatari)
	
	
